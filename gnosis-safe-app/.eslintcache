[{"/Users/bob/1inch-multisig-proxy/gnosis-safe-app/src/App.tsx":"1","/Users/bob/1inch-multisig-proxy/gnosis-safe-app/src/index.tsx":"2","/Users/bob/1inch-multisig-proxy/gnosis-safe-app/src/GlobalStyle.ts":"3","/Users/bob/1inch-multisig-proxy/gnosis-safe-app/src/Explainer.tsx":"4","/Users/bob/1inch-multisig-proxy/gnosis-safe-app/src/CreateOrder.tsx":"5","/Users/bob/1inch-multisig-proxy/gnosis-safe-app/src/helpers.ts":"6"},{"size":360,"mtime":1608997864835,"results":"7","hashOfConfig":"8"},{"size":934,"mtime":1609000724808,"results":"9","hashOfConfig":"8"},{"size":787,"mtime":1608560168006,"results":"10","hashOfConfig":"8"},{"size":1662,"mtime":1608804654767,"results":"11","hashOfConfig":"8"},{"size":8093,"mtime":1608804883135,"results":"12","hashOfConfig":"8"},{"size":2844,"mtime":1608997864850,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"113weml",{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"20"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/bob/1inch-multisig-proxy/gnosis-safe-app/src/App.tsx",[],"/Users/bob/1inch-multisig-proxy/gnosis-safe-app/src/index.tsx",[],"/Users/bob/1inch-multisig-proxy/gnosis-safe-app/src/GlobalStyle.ts",[],["28","29","30"],"/Users/bob/1inch-multisig-proxy/gnosis-safe-app/src/Explainer.tsx",[],"/Users/bob/1inch-multisig-proxy/gnosis-safe-app/src/CreateOrder.tsx",["31","32"],"import React, { useCallback, useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { Button, Loader, Title, Text, TextField } from '@gnosis.pm/safe-react-components';\nimport Avatar from '@material-ui/core/Avatar';\nimport { useSafeAppsSDK } from '@gnosis.pm/safe-apps-react-sdk';\nimport { toBN, isAddress } from 'web3-utils';\nimport { defaultToken, getTokenAndBalance, prepareSubmitTx, prepareApproveTx } from './helpers'\n\nconst Container = styled.div`\n  margin-bottom: 2rem;\n  width: 100%;\n  max-width: 480px;\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-column-gap: 1rem;\n  grid-row-gap: 1rem;\n`;\n\nconst TextFieldContainer = styled.div`\n  align-items: center;\n  display: flex;\n  justify-content: left;\n  margin-bottom: 17px;\n`;\n\nconst CreateOrder: React.FC = () => {\n  const { sdk, safe } = useSafeAppsSDK();\n\n  const [disabled, setDisabled] = useState(true);\n  const [loading, setLoading] = useState(false);\n  const [needApproval, setNeedApproval] = useState(false);\n  const [errors, setErrors] = useState<string[]>([]);\n  const [safeBlance, setSafeBalance] = useState('');\n\n  const [srcToken, setSrcToken] = useState(defaultToken);\n  const [dstToken, setDstToken] = useState(defaultToken);\n  const [srcAmount, setSrcAmount] = useState('');\n  const [minDstAmount, setMinDstAmount] = useState('');\n  const [reward, setReward] = useState('');\n\n  const handleAddress = async (setCb, value) => {\n    const newToken = await getTokenAndBalance(value, safe.safeAddress);\n    setCb(newToken);\n  };\n\n  const checkTx = async (safeTxHash) => {\n    const safeTx = await sdk.txs.getBySafeTxHash(safeTxHash);\n    if (!safeTx.isExecuted) {\n      setTimeout(() => checkTx(safeTxHash), 1000);\n    }\n    else {\n      setLoading(false);\n      const token = await getTokenAndBalance(srcToken.address, safe.safeAddress);\n      setSrcToken(token);\n    }\n  }\n\n  const onSubmit = useCallback(async () => {\n    setLoading(true);\n    try {\n      const tx = await prepareSubmitTx(srcToken, dstToken, srcAmount, minDstAmount, reward);\n      const { safeTxHash } = await sdk.txs.send({ txs: [ tx ] });\n\n      console.log({ safeTxHash });\n      checkTx(safeTxHash);\n    }\n    catch (e) {\n      setLoading(false);\n      console.error(e);\n    }\n  }, [sdk, srcToken, dstToken, srcAmount, minDstAmount, reward]);\n\n  const onApproveLimit = useCallback(async () => {\n    setLoading(true);\n    try {\n      const tx = await prepareApproveTx(srcToken, srcAmount);\n      const { safeTxHash } = await sdk.txs.send({ txs: [ tx ] });\n\n      console.log({ safeTxHash });\n      checkTx(safeTxHash);\n    }\n    catch (e) {\n      setLoading(false);\n      console.error(e);\n    }\n  }, [sdk, srcToken, srcAmount]);\n\n  useEffect(() => {\n    const errors: string[] = [];\n\n    if (srcToken.address !== '' && !isAddress(srcToken.address)) {\n      errors.push('INVALID_INPUT_ADDRESS');\n    }\n    if (dstToken.address !== '' && !isAddress(dstToken.address)) {\n      errors.push('INVALID_TARGET_ADDRESS');\n    }\n\n    if (isAddress(srcToken.address) && srcAmount !== '') {\n      const srcAmountBN = toBN(Number(srcAmount) * Math.pow(10, srcToken.decimals));\n      const balanceBN = toBN(srcToken.balance);\n      const rewardBN = toBN(Number(reward) * Math.pow(10, 18));\n      const valueBN = srcToken.name === 'Ethereum'\n        ? srcAmountBN.add(rewardBN)\n        : rewardBN;\n\n      if (srcAmountBN.gte(balanceBN)) {\n        errors.push( 'NOT_ENOUGH_FOR_INPUT');\n      }\n\n      if (reward !== '' && valueBN.gte(toBN(safeBlance))) {\n        errors.push('NOT_ENOUGH_FOR_VALUE');\n      }\n    }\n\n    if (srcToken.address !== '' &&\n      dstToken.address !== '' &&\n      srcAmount !== '' &&\n      minDstAmount !== '' &&\n      reward !== '' &&\n      errors.length === 0\n    ) {\n      setDisabled(false);\n    }\n    setErrors(errors);\n  }, [safeBlance, srcToken, dstToken, srcAmount, minDstAmount, reward]);\n\n  useEffect(() => {\n    if (srcToken.address !== '' &&\n      isAddress(srcToken.address) &&\n      srcToken.name !== 'Ethereum'\n    ) {\n      const srcAmountBN = toBN(Number(srcAmount) * Math.pow(10, srcToken.decimals));\n      const allowanceBN = toBN(Number(srcToken.allowance))\n\n      setNeedApproval(srcAmountBN.gt(allowanceBN));\n    }\n    else {\n      setNeedApproval(false);\n    }\n  }, [srcToken, srcAmount]);\n\n  useEffect(() => {\n    if (safe.safeAddress)\n      sdk.eth.getBalance([safe.safeAddress]).then(bal => setSafeBalance(bal));\n  }, [sdk, safe]);\n\n  return (\n    <Container>\n      <Title size=\"xs\">1Inch Order Proxy</Title>\n      <Text size=\"md\">helps Multisig avoid high slippage and missed trading opportunities on 1Inch when there’re some difficulties in coordinating transaction’s confirmation</Text>\n      <form noValidate autoComplete=\"off\">\n        <Text size=\"lg\">What's the address of the token that you want to swap?</Text>\n        <TextFieldContainer>\n          <TextField\n            endAdornment={srcToken?.logoURI !== ''\n              ? <Avatar style={{ height: '25px', width: '25px' }} src={srcToken?.logoURI} alt=\"Source token\"/>\n              : <></>\n            }\n            id=\"src-address\"\n            label=\"Input token address *\"\n            value={srcToken?.address}\n            meta={ errors.includes('INVALID_INPUT_ADDRESS') ? { error: 'Invalid address' } : {}}\n            onChange={({ target }) => handleAddress(setSrcToken, target.value)}\n          />\n        </TextFieldContainer>\n\n        <Text size=\"lg\">How much do you want to swap?</Text>\n        <TextFieldContainer>\n          <TextField\n            endAdornment={\n              <p>{srcToken?.symbol}</p>\n            }\n            id=\"src-amount\"\n            label=\"Amount *\"\n            value={srcAmount}\n            type=\"number\"\n            meta={ errors.includes('NOT_ENOUGH_FOR_INPUT') ? { error: 'You don\\'t have enough ' + srcToken.symbol } : {}}\n            onChange={({ target }) => setSrcAmount(target.value)}\n          />\n        </TextFieldContainer>\n\n        <Text size=\"lg\">What's the address of the token that you want to receive?</Text>\n        <TextFieldContainer>\n          <TextField\n            endAdornment={dstToken?.logoURI !== ''\n              ? <Avatar style={{ height: '25px', width: '25px' }} src={dstToken?.logoURI} alt=\"Target token\"/>\n              : <></>\n            }\n            id=\"dst-address\"\n            label=\"Target token address *\"\n            value={dstToken?.address}\n            meta={ errors.includes('INVALID_TARGET_ADDRESS') ? { error: 'Invalid address' } : {}}\n            onChange={({ target }) => handleAddress(setDstToken, target.value)}\n          />\n        </TextFieldContainer>\n\n        <Text size=\"lg\">What's the minimum amount you want to receive?</Text>\n        <TextFieldContainer>\n          <TextField\n            endAdornment={\n              <p>{dstToken?.symbol}</p>\n            }\n            id=\"min-dst-amount\"\n            label=\"Min. return amount *\"\n            value={minDstAmount}\n            type=\"number\"\n            onChange={({ target }) => setMinDstAmount(target.value)}\n          />\n        </TextFieldContainer>\n\n        <Text size=\"lg\">How much do you want to reward the one who executes the transaction?</Text>\n        <TextFieldContainer>\n          <TextField\n            id=\"reward\"\n            label=\"Reward in ETH *\"\n            value={reward}\n            type=\"number\"\n            meta={ errors.includes('NOT_ENOUGH_FOR_VALUE') ? { error: 'You don\\'t have enough ETH' } : {}}\n            onChange={({ target }) => setReward(target.value)}\n          />\n        </TextFieldContainer>\n      </form>\n        {loading ? <div><Loader size=\"sm\" /><Text size=\"md\">Waiting to execute a transaction...</Text></div> : (\n          needApproval ? (\n            <Button size=\"lg\" color=\"primary\" variant=\"contained\" onClick={onApproveLimit}>\n              Approve spending limit\n            </Button>\n          ) : (\n            <Button size=\"lg\" color=\"primary\" variant=\"contained\" disabled={disabled} onClick={onSubmit}>\n              Submit\n            </Button>\n          )\n      )}\n    </Container>\n  );\n};\n\nexport default CreateOrder;\n","/Users/bob/1inch-multisig-proxy/gnosis-safe-app/src/helpers.ts",[],{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","severity":1,"message":"40","line":71,"column":6,"nodeType":"41","endLine":71,"endColumn":64,"suggestions":"42"},{"ruleId":"39","severity":1,"message":"40","line":86,"column":6,"nodeType":"41","endLine":86,"endColumn":32,"suggestions":"43"},"jsx-a11y/accessible-emoji",[],"no-native-reassign",["44"],"no-negated-in-lhs",["45"],"react-hooks/exhaustive-deps","React Hook useCallback has a missing dependency: 'checkTx'. Either include it or remove the dependency array.","ArrayExpression",["46"],["47"],"no-global-assign","no-unsafe-negation",{"desc":"48","fix":"49"},{"desc":"50","fix":"51"},"Update the dependencies array to be: [srcToken, dstToken, srcAmount, minDstAmount, reward, sdk.txs, checkTx]",{"range":"52","text":"53"},"Update the dependencies array to be: [srcToken, srcAmount, sdk.txs, checkTx]",{"range":"54","text":"55"},[2258,2316],"[srcToken, dstToken, srcAmount, minDstAmount, reward, sdk.txs, checkTx]",[2676,2702],"[srcToken, srcAmount, sdk.txs, checkTx]"]